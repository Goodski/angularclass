"use strict";!function(o){o.module("application",["ngRoute"]).config(["$locationProvider","$routeProvider",function(o,t){o.html5Mode(!0),t.when("/exercise1",{templateUrl:"www/app/partials/exercise1.htm",controller:"exerciseOneController",controllerAs:"ctrl"}).when("/customer/:custid",{templateUrl:"www/app/partials/exercise2.htm",controller:"exerciseTwoController",controllerAs:"ctrl"})}]).controller("exerciseOneController",function(){var o=this;this.title="Exercise 1, in the controller",this.clickAction=function(){console.log(o)},this.students=[{name:"John"},{name:"Josh"},{name:"Mack"}]})}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["$routeParams","es",function(o,t){var e=this;console.log(o),this.routeParams=o,this.es=t;this._possibleColors=[{name:"Blue",color:"1000ff"},{name:"Red",color:"ff0000"},{name:"green",color:"05ff05"}],this.buttonText="Button Text",this.buttonMouseEnter=function(){this.buttonText="rolled over"},this.buttonResetClick=function(){this.buttonText="Button Text"},this._getRandomColorFromCollectgion=function(){return e._possibleColors[Math.floor(Math.random()*e._possibleColors.length)]},this._createObject=function(){var o={name:"Obj"+(e.objectArray.length+1),clickCount:0,color:e._getRandomColorFromCollectgion().color};return console.log(o),o},this.objectArray=[],this.controllerInitObject=this._createObject(),this.objectArray.push(this.controllerInitObject),this.addNewObject=function(){e.objectArray.push(e._createObject())},this.colorFilterChanged=function(){e.filter.color||delete e.filter.color}}])}(window.angular),function(o){o.module("application").service("es",function(){function o(){this.loggedInUser={name:"Joe",photo:"",loginTime:Date.now()}}function t(){this.loggedInUser={}}this.loggedInUser={},this.login=o,this.logout=t})}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
